substitutions:
  node_name: bldc-fan-1
  node_friendly_name: "Fan 1"

esphome:
  name: dmini-1
  platform: ESP8266
  board: d1_mini
  on_boot:
    priority: 600
    then:
      # Set initial speed on boot up
      lambda: !lambda |-
        id(fan_1).speed = 30;
        id(my_encoder).set_value(30);
          

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
  password: "2a5cde85886f24676cd7dd8a14da7926"

wifi:
  ssid: #Input your Wifi ID
  password: # Input Wifi password 

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Dmini-1 Fallback Hotspot"
    password: "ylK8qXH7Luw7"

captive_portal:


fan:
  - platform: speed
    output: pwm_output
    name: "Fan 1"
    id: fan_1
  
binary_sensor:
  - platform: gpio
    pin:
      number: D4
      mode: INPUT_PULLUP
      inverted: true
    name: "Rotary Switch"
    internal: true
    on_press:
       then:
        - lambda: !lambda |-
            id(my_encoder).set_value(id(fan_1).speed);
        - fan.toggle: fan_1

sensor:
   - platform: rotary_encoder
    name: "Rotary Encoder"
    id: my_encoder
    pin_a: D2
    pin_b: D3
    resolution: 1
    min_value: 0
    max_value: 100
    filters:
      - or:
        - debounce: 0.1s
        - delta: 10
      - lambda: |-
          if (x < 0.0) return 0.0;
          if (x > 100.0) return 100.0;
          return x;
    on_value:
      then:
        lambda: !lambda |-
          if(id(fan_1).state) {
            id(fan_1).speed = x;
            id(pwm_output).set_level(x/100);
          }
          
  # Log battery voltage through a divider with R1 = 100KOhm, R2 = 22K + 3.3K 
  - platform: adc
    pin: A0
    name: "Lifepo4 4S"
    id: battery_voltage
    update_interval: 60s  
  - platform: template
    name: ${node_friendly_name} Battery Level
    device_class: battery
    unit_of_measurement: '%'
    accuracy_decimals: 0
    update_interval: 600s
    lambda: |-
      return ((((id(battery_voltage).state)*16.7)-10.6)/4.0)*100;
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
  - platform: wifi_signal
    name: "WiFi Signal"
    update_interval: 60s
    
# PWM output to BLDC              
output:
  - platform: esp8266_pwm
    pin: D1
    frequency: 15000 Hz
    id: pwm_output
